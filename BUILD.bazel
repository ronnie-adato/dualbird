licenses(["notice"])

exports_files(["COPYING"])

# platform() to build with clang-cl on Bazel CI. This is enabled with
# the flags in .bazelci/presubmit.yml:
#
#   --incompatible_enable_cc_toolchain_resolution
#   --extra_toolchains=@local_config_cc//:cc-toolchain-x64_windows-clang-cl
#   --extra_execution_platforms=//:x64_windows-clang-cl
platform(
    name = "x64_windows-clang-cl",
    constraint_values = [
        "@platforms//cpu:x86_64",
        "@platforms//os:windows",
        "@rules_cc//cc/private/toolchain:clang-cl",
    ],
)

load("@hedron_compile_commands//:refresh_compile_commands.bzl", "refresh_compile_commands")

refresh_compile_commands(
    name = "refresh_compile_commands",

    # Specify the targets of interest.
    # For example, specify a dict of targets and any flags required to build.
    targets = {
    #   "//:my_output_1": "--important_flag1 --important_flag2=true",
    #   "//:my_output_2": "",
      "//:dual-bird": "",
      "//tests:tests-dual-bird": "",
    },
    # No need to add flags already in .bazelrc. They're automatically picked up.
    # If you don't need flags, a list of targets is also okay, as is a single target string.
    # Wildcard patterns, like //... for everything, *are* allowed here, just like a build.
      # As are additional targets (+) and subtractions (-), like in bazel query https://docs.bazel.build/versions/main/query.html#expressions
    # And if you're working on a header-only library, specify a test or binary target that compiles it.
)

cc_library(
    name = "dual-bird",
    srcs = [
        "src/node.cpp",
        "src/rsol.cpp",
        "src/msol.cpp",
    ],
    hdrs = glob(["include/*.hpp"]),
    includes = [
        "include",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@ng-log//:ng-log",  # Replace with actual ng-log Bazel target if available
    ],
)
